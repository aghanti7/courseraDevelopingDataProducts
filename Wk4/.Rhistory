str(cutAge)
cutAge
table(cutAge)
qplot(training$CompressiveStrength, pch=19)
qplot(training$CompressiveStrength)
str(training)
training$Cement <- cut2(training$Cement, g=4)
training$Cement <- cut2(training$BlastFurnaceSlag, g=4)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
training$Cement <- cut2(training$Cement, g=4)
training$BlastFurnaceSlag <- cut2(training$BlastFurnaceSlag, g=4)
training$FlyAsh <- cut2(training$FlyAsh, g=4)
training$Water <- cut2(training$Water, g=4)
training$Superplasticizer <- cut2(training$Superplasticizer, g=4)
training$CoarseAggregate <- cut2(training$CoarseAggregate, g=4)
training$FineAggregate <- cut2(training$FineAggregate, g=4)
training$Age <- cut2(training$Age, g=4)
head(training[-CompressiveStrength])
head(training[-training$CompressiveStrength])
summary(training[-training$CompressiveStrength])
str(training[-training$CompressiveStrength])
head(training)
summary(training)
head(training[,1:8])
featurePlot(x=training[,1:8], y=training$CompressiveStrength, plot="pairs")
fit <- lm(CompressiveStrength~., training)
summary(fit)
modFit <- train(CompressiveStrength~., method="lm", data=training)
modFit$finalModel
finMod <- modFit$finalModel
head(finMod$residuals)
finMod$residuals
plot(finMod$residuals, pch=19)
str(finMod)
str(training)
plot(finMod$residuals, pch=19, color=training$Cement)
plot(finMod$residuals, pch=19, colour=training$Cement)
plot(finMod$residuals, pch=19)
which(training$CompressiveStrength)
?index2vec
qplot(training$CompressiveStrength)
plot(training$CompressiveStrength)
plot(training$CompressiveStrength, colour=training$Age)
plot(training$CompressiveStrength, col=training$Age)
plot(training$CompressiveStrength, col=training[,1:8])
plot(training$CompressiveStrength, col=c(training$Age, training$Cement)
)
qplot(training$CompressiveStrength)
qplot(training$CompressiveStrength, pch=19)
names(training)
plot(training$CompressiveStrength, colour=training$Cement)
ggplot(training$CompressiveStrength) + geom_point()
?gl
plot(training$CompressiveStrength, colour=training$Cement)
plot(training$CompressiveStrength, colour=training$Age)
plot(training$CompressiveStrength, col=training$Cement)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(Hmisc)
names(training)
training$Cement <- cut2(training$Cement, g=4)
training$BlastFurnaceSlag <- cut2(training$BlastFurnaceSlag, g=4)
training$FlyAsh <- cut2(training$FlyAsh, g=4)
training$Water <- cut2(training$Water, g=4)
training$Superplasticizer <- cut2(training$Superplasticizer, g=4)
training$CoarseAggregate <- cut2(training$CoarseAggregate, g=4)
training$FineAggregate <- cut2(training$FineAggregate, g=4)
training$Age <- cut2(training$Age, g=4)
plot(training$CompressiveStrength, col=training$Cement)
plot(training$CompressiveStrength, col=training$BlastFurnaceSlag)
plot(training$CompressiveStrength, col=training$FlyAsh)
plot(training$CompressiveStrength, col=training$Water)
plot(training$CompressiveStrength, col=training$Superplasticizer)
plot(training$CompressiveStrength, col=training$CoarseAggregate)
plot(training$CompressiveStrength, col=training$FineAggregate)
plot(training$CompressiveStrength, col=training$Age)
levels(training$FlyAsh)
summary(training$FlyAsh)
?mutate
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(training$Superplasticizer)
log(0)
log(1)
log(-1)
qplot(training$Superplasticizer)
qplot(log(training$Superplasticizer))
qplot(log(training$Superplasticizer+1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
names(training)
grep("^IL", names(training))
names(training[grep("^IL", names(training))]
names(training[grep("^IL", names(training))])
head(training[grep("^IL", names(training))])
str(training[grep("^IL", names(training))])
summary(training[grep("^IL", names(training))])
preProc <- preProcess(training[grep("^IL", names(training))], method = "pca")
summary(preProc)
preProc
preProc <- preProcess(training[grep("^IL", names(training))], method = "pca", thresh=.9)
preProc
summary(training[grep("^IL", names(training))])
names(training[grep("^IL", names(training))])
names(training[grep("^[Ii][Ll]", names(training))])
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433); data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433); data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]; training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training[grep("^[Ii][Ll]", names(training))])
head(training[grep("^[Ii][Ll]", names(training))])
head(training[,grep("^[Ii][Ll]", names(training))])
head(training[1,grep("^[Ii][Ll]", names(training))])
which(training[,grep("^[Ii][Ll]", names(training))])
training[,grep("^[Ii][Ll]", names(training))]
head(training[,grep("^[Ii][Ll]", names(training))])
names(training[,grep("^[Ii][Ll]", names(training))])
names(training[,c(grep("diagnosis", names(training)), grep("^[Ii][Ll]", names(training)))])
head(training[,c(grep("diagnosis", names(training)), grep("^[Ii][Ll]", names(training)))])
modTrain <- training[,c(grep("diagnosis", names(training)), grep("^[Ii][Ll]", names(training)))]
str(modTrain)
head(modTrain[-diagnosis])
head(modTrain[-diagnosis,])
head(modTrain[,-diagnosis])
preProc <- preProcess(training[grep("^IL", names(training))], method = "pca", thresh=.80)
modTrain <- training[, grep("^[Ii][Ll]", names(training))]
names(modTrain)
preProc <- preProcess(modTrain, method = "pca", thresh=.80)
modTrain <- training[,c(grep("diagnosis", names(training)), grep("^[Ii][Ll]", names(training)))]
rm(preProc)
head(modTrain)
model1 <- train(modTrain$diagnosis~., method="glm", data=modTrain)
summary(model1)
str(modTrain)
model1 <- train(diagnosis~IL_1alpha+IL_3+IL_4+IL_5+IL_6+IL_6_Receptor+IL_7+IL_8+IL_11+IL_13+IL_16+IL_17E, method="glm", data=training)
model2 <- train(diagnosis~IL_1alpha+IL_3+IL_4+IL_5+IL_6+IL_6_Receptor+IL_7+IL_8+IL_11+IL_13+IL_16+IL_17E, method="glm", preProcess="pca", data=training, thresh=0.8)
model2 <- train(diagnosis~IL_1alpha+IL_3+IL_4+IL_5+IL_6+IL_6_Receptor+IL_7+IL_8+IL_11+IL_13+IL_16+IL_17E, method="glm", preProcess="pca", data=training, trainControl(preProcOptions = list(thresh=0.8)))
model2 <- train(diagnosis~IL_1alpha+IL_3+IL_4+IL_5+IL_6+IL_6_Receptor+IL_7+IL_8+IL_11+IL_13+IL_16+IL_17E, method="glm", preProcess="pca", data=training, trControl = trainControl(preProcOptions = list(thresh=0.8)))
summary(model1)
summary(model2)
confusionMatrix(testing$diagnosis, predict(model1, testing))
confusionMatrix(testing$diagnosis, predict(model2, testing))
b <- c(3,5,4,7)
p <- c(3,6,5,8)
d <- c(2,4,5,6)
bmu <- mean(b)
pmu <- mean(p)
dmu <- mean(d)
(sum((b-bmu)^2) + sum((p-pmu)^2) + sum((d-dmu)^2))/(nrow(b)+nrow(p)+nrow(d)-3)
b-bmu
(b-bmu)^2
sum((b-bmu)^2)
sum((p-pmu)^2)
sum((d-dmu)^2)
nrow(b)
(sum((b-bmu)^2) + sum((p-pmu)^2) + sum((d-dmu)^2))/(12-3)
mu <- 4.83
(bmu+dmu+pmu)/3
round((sum((b-bmu)^2) + sum((p-pmu)^2) + sum((d-dmu)^2))/(12-3), 3)
round((sum((b-bmu)^2) + sum((p-pmu)^2) + sum((d-dmu)^2))/(12-3), 4)
round((sum((b-bmu)^2) + sum((p-pmu)^2) + sum((d-dmu)^2))/(12-3), 2)
(4*(bmu-mu)^2 + 4*(pmu-mu)^2 + 4*(dmu-mu)^2)/(3-1)
(36.5/20.6)
pf(36.5/20.6, (3-1), (30-3), lower.tail=F)
?pt
pt(.95, 12)
2.179/2
25 - 10 + c(-1,1)*sqrt(102/12)*sqrt(2/5)
1/5
2/5
round(25 - 10 + c(-1,1)*sqrt(102/12)*sqrt(2/5), 3
)
round(25 - 10 + c(-1,1)*sqrt(102/12)*sqrt(2/5), 4)
2*sqrt(14.32)
sqrt(23.56)
pf(3.2, 1, 65, lower.tail=FALSE)
pf(5.6, 1, 56, lower.tail=FALSE)
6.8*6.2
round(25 - 10 + c(-1,1)*2.1788*sqrt(102/12)*sqrt(2/5), 4)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=.75);
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=.75, list=FALSE);
View(inTrain)
View(segmentationOriginal)
training <- segmentationOriginal[inTrain,]
training <- segmentationOriginal[-inTrain,]
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[inTrain,]
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
View(training)
names(training)
View(segmentationOriginal)
modFit <- train(Class~., method="rpart", data=training)
summary(modFit)
print(modFit$finalModel)
library(rattle)
install.packages(rattle)
install.packages("rattle")
library(rattle)
predict(modFit, newdata = testing)
plot(modFit)
plot(modFit, uniform=TRUE)
plot(modFit$finalModel, uniform=TRUE)
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=.6, list=FALSE);
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
modFit <- train(Class ~ ., method = "rpart", data = training)
modFit$finalModel
modFit <- train(Class ~ ., method = "rpart", data = segmentationOriginal)
modFit$finalModel
library(pgmm)
data(olive)
View(olive)
olive = olive[,-1]
library(pgmm)
data(olive)
olive = olive[,-1]
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
modFit <- train(Area ~ ., method = "rpart", data = olive)
set.seed(125)
modFit <- train(Area ~ ., method = "rpart", data = olive)
modFit$finalModel
predict(modFit, newdata = newdata)
library(caret)
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
modFit <- train(Area ~ ., method = "rpart", data = olive)
predict(modFit, newdata = newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
View(SAheart)
set.seed(13234)
View(trainSA)
featurePlot(x=trainSA(c("age","alcohol","obesity", "tobacco", "typea", "ldl")), y=trainSA$chd, plot="pairs")
featurePlot(x=trainSA[,c("age","alcohol","obesity", "tobacco", "typea", "ldl")], y=trainSA$chd, plot="pairs")
qplot(age, chd, data=trainSA)
modFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, method = "glm", family="binomial", data = trainSA)
modFit$finalModel
plot(modFit$finalModel, pch=19)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predict(modFit, newdata = testSA)
pred <- predict(modFit, newdata = testSA)
names(pred)
dim(pred)
qplot(chd, pred, data=testSA)
missClass(testSA$chd, pred)
modFit$finalModel
missClass(testSA$chd, predict(modFit, newdata = trainSA))
missClass(trainSA$chd, predict(modFit, newdata = trainSA))
missClass(testSA$chd, predict(modFit, newdata = testSA))
library(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
View(vowel.test)
View(vowel.train)
View(vowel.train)
summary(vowel.test)
summary(vowel.train)
summary(vowel.train$y)
values(vowel.train$y)
as.factor(vowel.train$y)
unique(vowel.train$y)
unique(vowel.test$y)
vowel.test$y = as.factor(vowel.test$y)
vowel.train$y = as.factor(vowel.train$y)
set.seed(33833)
rf <- randomForest(y~., data=vowel.train)
library(randomForest)
rf <- randomForest(y~., data=vowel.train)
summary(rf)
rf
varimp(rf)
varImp(rf)
modFit <- train(y~., data=vowel.train, method="rf")
modFit$finalModel
varImp(modFit)
order(varImp(rf), decreasing = T)
order(varImp(modFit), decreasing = T)
order(varImp(modFit$finalModel), decreasing = T)
varImp(rf)
varImp(modFit$finalModel)
q()
getwd
getwd()
install.packages("shiny")
library(shiny)
library(shiny)
library(miniUI)
library(googleVis)
library(plotly)
install.packages("plotly")
library(plotly)
install.packages("ggplot2")
library(plotly)
runApp('Desktop/Coursera/Johns Hopkins Univ - Data Science Specialization/Course 09 - Developing Data Products/Assignments/Wk1/Wk1')
install.packages("survival")
runApp('Desktop/Coursera/Johns Hopkins Univ - Data Science Specialization/Course 09 - Developing Data Products/Assignments/Wk1/Wk1')
runApp('Desktop/Coursera/Johns Hopkins Univ - Data Science Specialization/Course 09 - Developing Data Products/Assignments/Wk1/Wk1')
runApp('Desktop/Coursera/Johns Hopkins Univ - Data Science Specialization/Course 09 - Developing Data Products/Assignments/Wk1/Wk1')
pickXY(my_data)
pickXY <- function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(data_frame$X, data_frame$Y, main = "Plot of Y versus X",
xlab = "X", ylab = "Y")
})
observeEvent(input$done, {
stopApp(brushedPoints(data_frame, input$brush,
xvar = "X", yvar = "Y"))
})
}
runGadget(ui, server)
}
my_data <- data.frame(X = rnorm(100), Y = rnorm(100))
pickXY(my_data)
data_frame <- my_data
pickXY(data_frame)
install.packages("leaflet")
library(leaflet)
leaflet() %>% addTiles()
leaflet() %>% addTiles() %>% addMarkers(lat=12.30547, lng=76.65445, popup="Mysore Palace")
df <- ((12.30547, 76.65445, "Mysore Palace”),
(12.3009, 76.6681, “Sri Chamarajendra Zoological Gardens“)
)
df <- data.frame((12.30547, 76.65445, "Mysore Palace”),
(12.3009, 76.6681, “Sri Chamarajendra Zoological Gardens“)
)
df <- data.frame(lat = (12.30547, 12.3009, 12.3027, 12.3098, 12.2716, 12.30678, 12.2983, 12.2711, 12.2970, 12.30071, 12.3128, 12.27222, 12.3343, 12.32095, 12.30360, 12.30478, 12.30741, 12.30923, 12.30989, 12.31089, 12.32120, 12.32686),
lng = (76.65445, 76.6681, 76.6735, 76.6306, 76.6703, 76.64968, 76.6928, 76.6122, 76.6701, 76.65891, 76.6216, 76.67088, 76.6545, 76.65828, 76.65571, 76.65308, 76.65555, 76.65495, 76.65611, 76.65208, 76.63711, 76.63284),
popup = ("Mysore Palace”, “Sri Chamarajendra Zoological Gardens“, “Karanji Kere”, “Kukkarahalli Kere”, “Chamundi Betta“, “Jaganmohan Palace”, “Lalitha Mahal Palace”, “Lingambudhi Kere”, “Race Course”, “Dasara Exhibition Grounds”, “Manasagangotri Campus”, “Sri Chamundeshwari Temple”, “Bannimantapa Maidana”, “St. Philomena’s Church”, “Shweta Varahaswamy Temple”, “Lakshmiramana Temple”, “Kote Anjaneya Temple”, “Sri Rangacharlu Memorial Hall”, “Dodda Gadiyaara”, “Devaraja Market”, “Cheluvamba Park”, “Sri Lakshmi Venkataramanaswami Temple”))
knitr::opts_chunk$set(echo = TRUE)
df <- data.frame(lat = (12.30547, 12.3009, 12.3027, 12.3098, 12.2716, 12.30678, 12.2983, 12.2711, 12.2970, 12.30071, 12.3128, 12.27222, 12.3343, 12.32095, 12.30360, 12.30478, 12.30741, 12.30923, 12.30989, 12.31089, 12.32120, 12.32686),
df <- data.frame(lat = c(12.30547, 12.3009, 12.3027, 12.3098, 12.2716, 12.30678, 12.2983, 12.2711, 12.2970, 12.30071, 12.3128, 12.27222, 12.3343, 12.32095, 12.30360, 12.30478, 12.30741, 12.30923, 12.30989, 12.31089, 12.32120, 12.32686),
lng = c(76.65445, 76.6681, 76.6735, 76.6306, 76.6703, 76.64968, 76.6928, 76.6122, 76.6701, 76.65891, 76.6216, 76.67088, 76.6545, 76.65828, 76.65571, 76.65308, 76.65555, 76.65495, 76.65611, 76.65208, 76.63711, 76.63284),
popup = c("Mysore Palace", "Sri Chamarajendra Zoological Gardens", "Karanji Kere", "Kukkarahalli Kere", "Chamundi Betta", "Jaganmohan Palace", "Lalitha Mahal Palace", "Lingambudhi Kere", "Race Course", "Dasara Exhibition Grounds", "Manasagangotri Campus", "Sri Chamundeshwari Temple", "Bannimantapa Maidana", "St. Philomena’s Church", "Shweta Varahaswamy Temple", "Lakshmiramana Temple", "Kote Anjaneya Temple", "Sri Rangacharlu Memorial Hall", "Dodda Gadiyaara", "Devaraja Market", "Cheluvamba Park", "Sri Lakshmi Venkataramanaswami Temple"))
df%>% leaflet() %>% addTiles() %>% addMarkers()
df%>% leaflet() %>% addTiles() %>% addMarkers(popup = df$popup)
df%>% leaflet() %>% addTiles() %>% addMarkers(popup = df$popup, clusterOptions = markerClusterOptions())
getwd()
setwd("~/Desktop/Coursera/Johns Hopkins Univ - Data Science Specialization/Course 09 - Developing Data Products/Assignments/courseraDevelopingDataProducts/Wk3")
setwd("~/Desktop/Coursera/Johns Hopkins Univ - Data Science Specialization/Course 09 - Developing Data Products/Assignments/courseraDevelopingDataProducts/Wk4")
data(swiss)
view(swiss)
View(swiss)
require(stats); require(graphics)
pairs(swiss, panel = panel.smooth, main = "swiss data",
col = 3 + (swiss$Catholic > 50))
summary(lm(Fertility ~ . , data = swiss))
plot(lm(Fertility ~ . , data = swiss))
data(Wage))
data(Wage)
library(ISLR)
install.packages("ISLR")
library(ISLR)
data(Wage)
View(Wage)
shiny::runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
?Wage
runApp('analyzeWagesShinyApp')
str(Wage)
head(Wage[, "race"])
head(Wage[, c("race","region")])
names(Wage)
head(Wage[, c("year", "age", "sex", "maritl", "race", "education", "region", "jobclass", "health")])
length(Wage[, c("year", "age", "sex", "maritl", "race", "education", "region", "jobclass", "health")])
Wage[, c("year", "age", "sex", "maritl", "race", "education", "region", "jobclass", "health")]
wageData <- Wage[, c("year", "age", "sex", "maritl", "race", "education", "region", "jobclass", "health")]
str(wageData)
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
c("sex", "maritl", "race", "education", "region", "jobclass", "health")
as.list("sex", "maritl", "race", "education", "region", "jobclass", "health")
as.list(c("sex", "maritl", "race", "education", "region", "jobclass", "health"))
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
ggplot(wageData, aes("age", "wage", color = "sex")) + geom_point()
ggplot(wageData, aes_string("age", "wage", color = "sex")) + geom_point()
names(wageData)
ggplot(wageData, aes_string("age", "wage")) + geom_point()
ggplot(wageData, aes_string(age, wage)) + geom_point()
ggplot(wageData, aes(age, wage)) + geom_point()
names(Wage)
wageData <- Wage[, c("wage", "year", "age", "sex", "maritl", "race", "education", "region", "jobclass", "health")]
ggplot(wageData, aes("age", "wage", color = "sex")) + geom_point()
ggplot(wageData, aes_string("age", "wage", color = "sex")) + geom_point()
str(wageData$sex)
summary(wageData$sex)
summary(Wage$sex)
summary(Wage)
wageData <- Wage[, c("wage", "year", "age", "maritl", "race", "education", "jobclass", "health", "health_ins")]
ggplot(wageData, aes("age", "wage", color = "race")) + geom_point()
ggplot(wageData, aes_string("age", "wage", color = "race")) + geom_point()
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
z
z <- c("Education", "Race", "MaritalStatus", "JobClass", "Health", "HealthInsurance", "Year")
z
z[-"Race"]
z(-"Race")
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
?type
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
runApp('analyzeWagesShinyApp')
ggplot(wageData,
aes_string("Age", "Wage")) + geom_point()
ggplot(wageData,
aes("Age", "Wage")) + geom_point()
ggplot(wageData, aes("Age", "Wage")) + geom_point()
ggplot(wageData, aes(Age, Wage)) + geom_point()
names(wageData) <- c("Wage", "Year", "Age", "MaritalStatus", "Race", "Education", "JobClass", "Health", "HealthInsurance")
ggplot(wageData, aes_string("Age", "Wage")) + geom_point()
ggplot(wageData, aes_string("Age", "Wage")) + geom_point() + facet_grid(. ~ Race)
ggplot(wageData, aes(Age, Wage)) + geom_point() + facet_grid(. ~ Race)
